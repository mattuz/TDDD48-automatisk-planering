(defdomain domain
(

(:operator (!load-uav ?uav ?contents ?loc) ;;Load UAV
    ;;precon
    ((at ?uav ?loc) (free ?uav) (contents ?contents) (has ?loc ?contents ?has)
    (call > ?has 0) ;;check that there are more than 0 crates with specific contents
    )                 ;;otherwise uav can't pick it up

    ;;deletelist
    ((free ?uav) (has ?loc ?contents ?has))

    ;;addlist
    ((carry ?uav ?contents)
    (has ?loc ?contents (call - ?has 1))
    )
) 

(:operator (!unload-uav-to-location ?uav ?loc ?contents) ;;Unload UAV
    ;;precon
    ((at ?uav ?loc) (carry ?uav ?contents)
    (needs ?loc ?contents ?needs)
    (has ?loc ?contents ?has)
    (call > ?needs 0) ;;if location needs more of specific content
    )

    ;;deletelist
    ((carry ?uav ?contents) (needs ?loc ?contents)
    (needs ?loc ?contents ?needs)
    (has ?loc ?contents ?has)
    )

    ;;addlist
    ((free ?uav) (at ?loc) 
    (has ?loc ?contents (call + ?has 1)) ;;has 1 more now
    (needs ?loc ?contents (call - ?needs 1)) ;;needs 1 less
    )
)

(:operator (!fly-uav ?uav ?from ?to) ;;Fly UAV
    ;;precon
    ((at ?uav ?from))
    ;;deletelist
    ((at ?uav ?from))
    ;;addlist
    ((at ?uav ?to))
) 

(:operator (!fly-carrier ?uav ?carrier ?from ?to) ;;fly carrier
    ;;precon
    ((at ?uav ?from) (at ?carrier ?from) (free ?uav)) ;;both UAV and carrier at same location
    ;;deletelist
    ((at ?uav ?from) (at ?carrier ?from) (free ?uav)) ;;"lock" uav with !free
    ;;addlist
    ((at ?uav ?to) (at ?carrier ?to) (free ?uav)) ;;uav stops holding carrier, and is free again
) 


(:operator (!load-carrier ?uav ?carrier ?loc ?contents) ;;load carrier
;;precon
    ((at ?uav ?loc) (at ?carrier ?loc) (capacity ?carrier ?capacity) (load ?carrier ?load)
    (call < ?load ?capacity)                    ;;capacity not reached
    (has ?loc ?contents ?has) (call > ?has 0)   ;;location has not ran out of supplies
    )
    ;;deletelist
    ((load ?carrier ?load) (has ?loc ?contents ?has)) 

    ;;addlist
    ((load ?carrier (call + ?load 1))
    (has ?loc ?contents (call - ?has 1))
    )
) 

(:operator (!unload-carrier ?uav ?carrier ?loc ?contents) ;;Unload carrier
    ;;precon                                              
    (
        (at ?uav ?loc) (at ?carrier ?loc) (load ?carrier ?load)
        (has ?loc ?contents ?has) 
        (needs ?loc ?contents ?needs)
    )
    ;;deletelist
    (
        (load ?carrier ?load) (has ?loc ?contents ?has)
        (needs ?loc ?contents ?needs)
    ) 

    ;;addlist
    (
        (load ?carrier (call - ?load 1))
        (has ?loc ?contents (call + ?has 1))
        (needs ?loc ?contents (call - ?needs 1))
        
    )
) 

(:method (unload-carrier ?uav ?carrier ?loc ?contents) ;;unload carrier method
    (                                                  ;;basically unloads carrier crate by crate
        (load ?carrier ?load) (call = ?load 0)
    ) 
    () ;; Carrier empty, done

    (
        (at ?uav ?loc) (at ?carrier ?loc)
        (load ?carrier ?load) (call > ?load 0)
        (has ?loc ?contents ?has) (needs ?loc ?contents ?needs)
        (call > ?needs 0) ;;if a location still needs the contents
    )
    (
        (!unload-carrier ?uav ?carrier ?loc ?contents)
        (unload-carrier ?uav ?carrier ?loc ?contents) ;;recurse
    )
    
    ()
    ()
)


(:method (deliver-crate ?uav ?from ?to ?contents) ;;deliver crate method
    ((needs ?to ?contents ?needs)
    (call = ?needs 0)
    ) ;;if location already has what they need
    () ;; don't to anything

    ((needs ?to ?contents ?needs) ;;if a location needs the contents
    (location ?to)(location ?from)
    (has ?to ?contents ?has)
    (call > ?needs 0) ;;do we have less than we want? get more
    )
    ;;
    ((!load-uav ?uav ?contents ?from)
    (!fly-uav ?uav ?from ?to)
    (!unload-uav-to-location ?uav ?to ?contents)
    (!fly-uav ?uav ?to ?from)
    ) 

    ()
    ()
)

(:method (load-carrier-full ?uav ?carrier ?loc ?contents ?needs) ;;load carrier until full or need is reached   
    (                                                            
        (at ?uav ?loc) (at ?carrier ?loc)
        (capacity ?carrier ?capacity) (load ?carrier ?load)
        (call = ?capacity ?load) ;;if capacity is reached
    )
    () ;;do nothing

    ( ;; if load = needs, no need to load more 
        (at ?uav ?loc) (at ?carrier ?loc)
        (load ?carrier ?load)
        (call = ?needs ?load)
    )
    () ;;do nothing

    (
        (at ?uav ?loc) (at ?carrier ?loc)
        (capacity ?carrier ?capacity) (load ?carrier ?load)
        (call < ?load ?capacity) ;;if capacity not reached
        (has ?loc ?contents ?has) (call > ?has 0) ;;and location still has contents to pick up
    )
    (
        (!load-carrier ?uav ?carrier ?loc ?contents)
        (load-carrier-full ?uav ?carrier ?loc ?contents ?needs) ;;go again to see if finished. 
    )  
    
    ()
    ()

)

(:method (deliver-carrier ?uav ?carrier ?from ?to ?contents);;deliver carrier method
    ((location ?from) (location ?to)    
    (needs ?to ?contents ?needs)
    (call = ?needs 0))
    () ;;if needs==0, done

    ((needs ?to ?contents ?needs) ;;if a location needs the contents
    (location ?to)(location ?from)
    (uav ?uav) (carrier ?carrier)
    (has ?to ?contents ?has)
    (call > ?needs 0))
    (
    (load-carrier-full ?uav ?carrier ?from ?contents ?needs) ;;load carrier
    (!fly-carrier ?uav ?carrier ?from ?to)                   ;;fly to drop location
    (unload-carrier ?uav ?carrier ?to ?contents)             ;;unload carrier
    (!fly-carrier ?uav ?carrier ?to ?from)                   ;;fly carrier back
    )

    ()
    ()
)

(:method (deliver-all)
    (
        (location ?to)
        (needs ?to ?contents ?needs)(call = ?needs 1) ;;if location only needs 1
    )
    (
        (deliver-crate ?uav ?from ?to ?contents) ;;deliver that single crate
        (deliver-all) ;;recurse
    )

    (
        (location ?to)
        (needs ?to ?contents ?needs) (call > ?needs 1)) ;;if location needs more than 1
    (
        (deliver-carrier ?uav ?carrier ?from ?to ?contents) ;;deliver crates with carrier
        (deliver-all) ;;recurse
    )

    () ;;only reaches this if it's done
    () ;;so nothing has to be done
)

)
)
